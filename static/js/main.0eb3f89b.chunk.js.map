{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/index.js","api/index.js","components/Chart/index.js","components/CountryPicker/index.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","assets/images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","dynamicUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","onChange","countryList","setCountryList","FormControl","formControl","NativeSelect","defaultValue","e","target","index","key","App","state","handleCountryChange","countryData","setState","fetchedData","this","image","src","coronaImage","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0eb3f89b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return 'Loading...';\n  }\n  \n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\">Infected</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\">Recovered</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Number of recovered cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\">Deaths</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let dynamicUrl = url;\n\n  if (country) {\n    dynamicUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(dynamicUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => (\n      {\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate\n      }\n    ));\n\n    return modifiedData;\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }\n    fetchAPI();\n  }, []);\n\n  const lineChart = (\n    dailyData.length ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => date),\n          datasets: [{\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true\n          }, {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n            fill: true\n          }]\n        }}\n      />) : null\n  );\n\n  const barChart = (\n    confirmed ? (\n      <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: [\n              'rgba(0, 0, 255, 0.5)',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)'\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          }]\n        }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `Current state in ${country}` }\n        }}\n      />\n    ) : null\n  );\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  )\n}\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ onChange }) => {\n  const [countryList, setCountryList] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => setCountryList(await fetchCountries());\n    fetchAPI();\n  }, [setCountryList]);\n\n  return (\n    <div>\n      <FormControl className={styles.formControl}>\n        <NativeSelect defaultValue=\"\" onChange={(e) => onChange(e.target.value)}>\n          <option value=\"\">Global</option>\n          {countryList.map((country, index) => <option key={index} value={country}>{country}</option>)}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default CountryPicker;\n","import React, { Component } from 'react';\nimport { Cards, Chart, CountryPicker } from './components';\nimport { fetchData } from './api';\nimport coronaImage from './assets/images/image.png';\nimport styles from './App.module.css';\n\nexport default class App extends Component {\n  state = {\n    data: {},\n    country: ''\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const countryData = await fetchData(country);\n    this.setState({ data: countryData, country: country });\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\n        <Cards data={data} />\n        <CountryPicker onChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}